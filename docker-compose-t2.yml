version: "3.7"

########################### NETWORKS
# Create t2_proxy network
# docker network create t2_proxy
# docker network create socket_proxy
# Alternatively, you can specify the gateway and subnet to use
# docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 t2_proxy
# docker network create --gateway 192.168.91.1 --subnet 192.168.91.0/24 socket_proxy
# Subnet range 192.168.0.0/16 covers 192.168.0.0 to 192.168.255.255

networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge
  socket_proxy:
    external:
      name: socket_proxy

########################### SECRETS
secrets:
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETSDIR/cloudflare_api_key
  cloudflare_api_token:
    file: $SECRETSDIR/cloudflare_api_token
  cloudflare_zoneid:
    file: $SECRETSDIR/cloudflare_zoneid
  authelia_jwt_secret:
    file: $SECRETSDIR/authelia_jwt_secret
  authelia_session_secret:
    file: $SECRETSDIR/authelia_session_secret
  authelia_storage_mysql_password:
    file: $SECRETSDIR/authelia_storage_mysql_password
  authelia_notifier_smtp_password:
    file: $SECRETSDIR/authelia_notifier_smtp_password
  authelia_duo_api_secret_key:
    file: $SECRETSDIR/authelia_duo_api_secret_key
  oauth_secret:
    file: $SECRETSDIR/oauth_secret
  google_client_secret:
    file: $SECRETSDIR/google_client_secret
  google_client_id:
    file: $SECRETSDIR/google_client_id
  my_email:
    file: $SECRETSDIR/my_email
  mysql_root_password:
    file: $SECRETSDIR/mysql_root_password

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/traefik2/traefik.log
  traefik:
    container_name: traefik
    image: traefik:chevrotin # the chevrotin tag refers to v2.2.x
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # - --providers.docker.defaultrule=HostHeader(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-authelia@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAIN # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAIN # Pulls wildcard cert for second domain
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      # networks:
      #   - t2_proxy
      socket_proxy:
    depends_on:
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    ports:
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
    secrets:
      - cloudflare_email
      - cloudflare_api_key
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik.$DOMAINNAME`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"

  # Traefik - Custom Error Pages
  traefik-error-pages:
    container_name: traefik-error-pages
    image: guillaumebriday/traefik-custom-error-pages
    restart: unless-stopped
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-error-pages-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-error-pages-rtr.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.traefik-error-pages-rtr.priority=1"
      # Middlewares
      - "traefik.http.routers.traefik-error-pages-rtr.middlewares=traefik-error-pages"
      - "traefik.http.middlewares.traefik-error-pages.errors.service=traefik-error-pages-svc"
      - "traefik.http.middlewares.traefik-error-pages.errors.status=401,403,404,429,500,502,503"
      - "traefik.http.middlewares.traefik-error-pages.errors.query=/{status}.html"
      # HTTP Services
      - "traefik.http.routers.traefik-error-pages-rtr.service=traefik-error-pages-svc"
      - "traefik.http.services.traefik-error-pages-svc.loadbalancer.server.port=80"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: fluencelabs/docker-socket-proxy
    restart: always
    networks:
      # t2_proxy:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    ports:
      - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      - DELETE=1 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer, Watchtower
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer
      # POST Options
      - CONTAINERS_CREATE=1 # WatchTower
      - CONTAINERS_START=1 # WatchTower
      - CONTAINERS_UPDATE=1 # WatchTower
      # DELETE Options
      - CONTAINERS_DELETE=1 # WatchTower
      - IMAGES_DELETE=1 # WatchTower

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    container_name: oauth
    # image: thomseddon/traefik-forward-auth:latest
    image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the apps later.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      - CLIENT_ID=/run/secrets/google_client_id
      - CLIENT_SECRET=/run/secrets/google_client_secret
      - SECRET=/run/secrets/oauth_secret
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST_FILE=/run/secrets/my_email
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets:
      - google_client_id
      - google_client_secret
      - oauth_secret
      - my_email
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=HostHeader(`oauth.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  # authelia:
  #   container_name: authelia
  #   # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
  #   image: authelia/authelia:latest
  #   restart: always
  #   networks:
  #     - t2_proxy
  #   # ports:
  #   #   - "9091:9091"
  #   volumes:
  #     - $DOCKERDIR/authelia:/config
  #   environment:
  #     - TZ=$TZ
  #     - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
  #     - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
  #     - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
  #     - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
  #     - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
  #   secrets:
  #     - authelia_jwt_secret
  #     - authelia_session_secret
  #     - authelia_storage_mysql_password
  #     - authelia_notifier_smtp_password
  #     # - authelia_duo_api_secret_key
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.authelia-rtr.entrypoints=https"
  #     - "traefik.http.routers.authelia-rtr.rule=HostHeader(`authelia.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.authelia-rtr.service=authelia-svc"
  #     - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
    # command: -H tcp://socket-proxy:2375 # appears to not work. Workaround was to create a new socket-proxy:2375 endpoint on portainer settings
    networks:
      - t2_proxy
      - socket_proxy
    depends_on:
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock:ro # # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=HostHeader(`portainer.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file" # Authelia
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  ############################# DATABASE

  # MariaDB - MySQL Database
  # After starting container for first time dexec and mysqladmin -u root password <password>
  # mariadb:
  #   container_name: mariadb
  #   image: linuxserver/mariadb:latest
  #   restart: always
  #   networks:
  #     t2_proxy:
  #       ipv4_address: 192.168.90.250
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - $DOCKERDIR/mariadb/data:/config
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password # Not taking this pw during initialization
  #   secrets:
  #     - mysql_root_password

  # # Redis - Key-value Store
  # redis:
  #   container_name: redis
  #   image: redis:latest
  #   restart: unless-stopped
  #   entrypoint: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - $DOCKERDIR/redis/data:/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro

  # InfluxDB - Database for sensor data
  # Create influxdb.conf
  # influxdb:
  #   image: influxdb:latest
  #   container_name: influxdb
  #   restart: always
  #   security_opt:
  #     - no-new-privileges:true
  #   ports:
  #     - "$INFLUXDB_PORT:8086"
  #   volumes:
  #     # - $DOCKERDIR/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
  #     - $DOCKERDIR/influxdb/db:/var/lib/influxdb
  # #    command: -config /etc/influxdb/influxdb.conf


  # Organizr - Unified Frontend
  organizr:
    container_name: organizr
    image: organizrtools/organizr-v2:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$ORGANIZR_PORT:80"
    volumes:
      - $DOCKERDIR/organizr:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=HostHeader(`$DOMAINNAME`) || HostHeader(`www.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=organizr-redirect@docker,chain-authelia@file"
        # Redirect non-www to www middleware
      - "traefik.http.middlewares.organizr-redirect.redirectregex.regex=^https?://$DOMAINNAME/(.*)"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.replacement=https://www.$DOMAINNAME/$${1}"
      - "traefik.http.middlewares.organizr-redirect.redirectregex.permanent=true"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  # Autoindex - Simple Directory Index
  # autoindex:
  #   container_name: autoindex
  #   image: dceoy/nginx-autoindex:latest
  #   restart: always
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$AUTOINDEX_PORT:80"
  #   volumes:
  #     - /media:/var/lib/nginx/html:ro # Location you want to index
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.autoindex-rtr.entrypoints=https"
  #     - "traefik.http.routers.autoindex-rtr.rule=HostHeader(`index.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.autoindex-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.autoindex-rtr.service=autoindex-svc"
  #     - "traefik.http.services.autoindex-svc.loadbalancer.server.port=80"



  ############################# DATABASE
  # Mariadb moved to NAS
  # Influxdb moved to NAS

  # phpMyAdmin - Database management
  # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin:latest
  #   container_name: phpmyadmin
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$PHPMYADMIN_PORT:80"
  #   # volumes:
  #   #   - $DOCKERDIR/phpmyadmin:/etc/phpmyadmin
  #   environment:
  #     - PMA_HOST=$DB_HOST
  #     - PMA_PORT=$DB_PORT
  #     #- PMA_ARBITRARY=1
  #     - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
  #   secrets:
  #     - mysql_root_password
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
  #     - "traefik.http.routers.phpmyadmin-rtr.rule=HostHeader(`pma.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
  #     - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"


  # Redis Commander - Redis Management Tool
  # rediscommander:
  #   container_name: rediscommander
  #   image: rediscommander/redis-commander:latest
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   # ports:
  #   #   - "$REDISCOMMANDER_PORT:8081"
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - REDIS_HOST=$NAS_IP
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.rediscommander-rtr.entrypoints=https"
  #     - "traefik.http.routers.rediscommander-rtr.rule=HostHeader(`rediscom.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.rediscommander-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.rediscommander-rtr.service=rediscommander-svc"
  #     - "traefik.http.services.rediscommander-svc.loadbalancer.server.port=8081"

  # Grafana - Graphical data visualization for InfluxDB data
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$GRAFANA_PORT:3000"
  #   user: "0"
  #   volumes:
  #     - $DOCKERDIR/grafana:/var/lib/grafana
  #   environment:
  #     GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.grafana-rtr.entrypoints=https"
  #     - "traefik.http.routers.grafana-rtr.rule=HostHeader(`grafana.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.grafana-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.grafana-rtr.service=grafana-svc"
  #     - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"



  ############################# UTILITIES

  # Glances - System Information
  # glances:
  #   image: nicolargo/glances:latest
  #   container_name: glances
  #   restart: unless-stopped
  #   privileged: true
  #   # network_mode: host
  #   networks:
  #     - t2_proxy
  #     - socket_proxy
  #   depends_on:
  #     - socket-proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$GLANCES_PORT:61208"
  #   pid: host
  #   volumes:
  #     - $DOCKERDIR/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
  #     # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
  #   environment:
  #     # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
  #     GLANCES_OPT: "-w"
  #     DOCKER_HOST: tcp://socket-proxy:2375
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.glances-rtr.entrypoints=https"
  #     - "traefik.http.routers.glances-rtr.rule=HostHeader(`nglances.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.glances-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.glances-rtr.service=glances-svc"
  #     - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # qDirStat - Directory Statistics
  # qdirstat:
  #   image: jlesage/qdirstat:latest
  #   container_name: qdirstat
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$QDIRSTAT_PORT:5800"
  #   volumes:
  #     - $USERDIR:/storage:ro
  #     - $DOCKERDIR/qdirstat/config:/config:rw
  #     - /media:/nas
  #   environment:
  #     USER_ID: $PUID
  #     GROUP_ID: $PGID
  #     UMASK: 002
  #     TZ: $TZ
  #     KEEP_APP_RUNNING: 1
  #     CLEAN_TMP_DIR: 1
  #     DISPLAY_WIDTH: 1600
  #     DISPLAY_HEIGHT: 960
  #     VNC_PASSWORD: $QDIRSTAT_VNC_PASSWD
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.qdirstat-rtr.entrypoints=https"
  #     - "traefik.http.routers.qdirstat-rtr.rule=HostHeader(`qdirstat.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.qdirstat-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
  #     - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800"

  # Dozzle - Real-time Docker Log Viewer
  # dozzle:
  #   image: amir20/dozzle:latest
  #   container_name: dozzle
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #     - socket_proxy
  #   depends_on:
  #     - socket-proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$DOZZLE_PORT:8080"
  #   environment:
  #     DOZZLE_LEVEL: info
  #     DOZZLE_TAILSIZE: 300
  #     DOZZLE_FILTER: "status=running"
  #     # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
  #     DOCKER_HOST: tcp://socket-proxy:2375
  #   # volumes:
  #   #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.dozzle-rtr.entrypoints=https"
  #     - "traefik.http.routers.dozzle-rtr.rule=HostHeader(`dozzle.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.dozzle-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
  #     - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  # StatPing - Status Page & Monitoring Server
  # statping:
  #   image: hunterlong/statping:latest
  #   container_name: statping
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$STATPING_PORT:8080"
  #   volumes:
  #     - $DOCKERDIR/statping:/app
  #   environment:
  #     VIRTUAL_HOST: localhost
  #     VIRTUAL_PORT: 8080
  #     DB_CONN: postgres
  #     DB_HOST: postgres
  #     DB_USER: $STATPING_DB_USER
  #     DB_PASS: $STATPING_DB_PASS
  #     DB_DATABASE: $STATPING_DB
  #     IS_DOCKER: "true"
  #     DISABLE_LOGS: "false"
  #     NAME: StatPing
  #     DESCRIPTION: Monitor web services
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.statping-rtr.entrypoints=https"
  #     - "traefik.http.routers.statping-rtr.rule=HostHeader(`statping.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.statping-rtr.middlewares=chain-no-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.statping-rtr.service=statping-svc"
  #     - "traefik.http.services.statping-svc.loadbalancer.server.port=8080"


  ############################# MAINTENANCE

  # WatchTower - Automatic Docker Container Updates
  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   restart: unless-stopped
  #   networks:
  #     - default
  #     - socket_proxy
  #   depends_on:
  #     - socket-proxy
  #   environment:
  #     TZ: $TZ
  #     WATCHTOWER_CLEANUP: "true"
  #     WATCHTOWER_REMOVE_VOLUMES: "true"
  #     WATCHTOWER_INCLUDE_STOPPED: "true"
  #     WATCHTOWER_NO_STARTUP_MESSAGE: "false"
  #     WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
  #     WATCHTOWER_NOTIFICATIONS: shoutrrr
  #     WATCHTOWER_NOTIFICATION_URL: "telegram://$TGRAM_BOT_TOKEN@telegram?channels=$TGRAM_CHAT_ID"
  #     WATCHTOWER_NOTIFICATIONS_LEVEL: info
  #     DOCKER_HOST: tcp://socket-proxy:2375
  #     DOCKER_API_VERSION: "1.40"

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  # dockergc:
  #   image: clockworksoul/docker-gc-cron:latest
  #   container_name: docker-gc
  #   restart: unless-stopped
  #   networks:
  #     - socket_proxy
  #   depends_on:
  #     - socket-proxy
  #   volumes:
  #     # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
  #     - $DOCKERDIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
  #   environment:
  #     CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
  #     FORCE_IMAGE_REMOVAL: 1
  #     FORCE_CONTAINER_REMOVAL: 0
  #     GRACE_PERIOD_SECONDS: 604800
  #     DRY_RUN: 0
  #     CLEAN_UP_VOLUMES: 1
  #     TZ: $TZ
  #     DOCKER_HOST: tcp://socket-proxy:2375

  # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    container_name: traefik_certdumper
    image: humenius/traefik-certs-dumper:latest
    network_mode: none
    security_opt:
      - no-new-privileges:true
    # command: --restart-containers container1,container2,container3
    volumes:
      - $DOCKERDIR/traefik2/acme:/traefik:ro
      - $DOCKERDIR/shared/certs:/output:rw
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Only needed if restarting containers (use Docker Socket Proxy instead)
    environment:
      DOMAIN: $DOMAINNAME

  # Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

  # Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - socket_proxy
    depends_on:
      - socket-proxy
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - CF_EMAIL=$CLOUDFLARE_EMAIL # Same as traefik
      # - CF_TOKEN=$CLOUDFLARE_API_TOKEN # Scoped api token not working. Error 10000.
      - CF_TOKEN=$CLOUDFLARE_API_KEY # Same as traefik
      - TARGET_DOMAIN=$DOMAINNAME
      - DOMAIN1=$DOMAINNAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
      - DOCKER_HOST=tcp://socket-proxy:2375
    secrets: # not working
      - cloudflare_email
      - cloudflare_api_key
      - cloudflare_zoneid
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`portainer.$DOMAINNAME`) || `synglances.$DOMAINNAME`) || `pihole.$DOMAINNAME`) || HostHeader(`shell.$DOMAINNAME`) || HostHeader(`syno.$DOMAINNAME`) || HostHeader(`webmin.$DOMAINNAME`) || HostHeader(`synplex.$DOMAINNAME`) || HostHeader(`pwt.$DOMAINNAME`)"
